%if MOD_ROGUELIKE

void RoguelikeLevelExit(SValue@ val, string background)
{
	auto campaign = cast<Campaign>(g_gameMode);
	if (campaign !is null)
		campaign.m_levelCount++;

	string level = "";
	if (Network::IsServer())
	{
		switch (randi(9))
		{
			case 0:
				level = "levels/e1m1.lvl";
				break;
			case 1:
				level = "levels/e1m2.lvl";
				break;
			case 2:
				level = "levels/e2m1.lvl";
				break;
			case 3:
				level = "levels/e2m2.lvl";
				break;
			case 4:
				level = "levels/e3m0.lvl";
				break;
			case 5:
				level = "levels/e3m1.lvl";
				break;
			case 6:
				level = "levels/e3m2.lvl";
				break;
			case 7:
				level = "levels/e4m1.lvl";
				break;
			case 8:
			default:
				level = "levels/e4m2.lvl";
				break;
		}
		
		if (randi(100) < 3)
			level = "levels/boguelike/random_cow.lvl";
	}
	
	auto screen = cast<BaseGameMode>(g_gameMode).m_levelEndScreen;
	screen.Show(val, level, "", background, false);
}

%endif



%if MOD_SPEEDRUN

array<float> g_random_seq = {
	0.39921902511999169373, 0.78386598336391249955, 0.54960384757573035205, 0.07289040021318745498, 0.83598007937489576599,
	0.53411282091667315228, 0.00648577102729953405, 0.25196610584803287893, 0.50525946351433389157, 0.16252370241851449787,
	0.90063876574458574677, 0.10871511057396384610, 0.95149192107869648203, 0.73214558320864349888, 0.29463578456829676817,
	0.38578183900131643115, 0.86960446194495227644, 0.75569635196321092883, 0.80487302346414604577, 0.56290352563484923157,
	0.22373482751045156217, 0.84043277142215947575, 0.76800650584993360132, 0.99290957753115581167, 0.48518488759183591642,
	0.06227516976373831695, 0.91684875700905025999, 0.33735099182123347918, 0.34223276194508274369, 0.05088539568138606099,
	0.94793533078686819138, 0.81254600348370468265, 0.79751541135123353076, 0.16285377519459575242, 0.73503780917790742311,
	0.68840979184837410989, 0.28215220211757425347, 0.84166458900507255176, 0.70822161610481370737, 0.25947792605590761728,
	0.94957117520494043882, 0.87873467898144575768, 0.30498128958676673551, 0.93611388588472462209, 0.58602237177951769551,
	0.39329943025468387903, 0.09341029005417200070, 0.81084984734820854532, 0.96176635564006097556, 0.75971554067520688901,
	0.10202226796359693865, 0.14816671409476746073, 0.81656061472687726355, 0.59883760472980788693, 0.91420681595417994861,
	0.68937556418575955173, 0.37938692621857130980, 0.60159655036278943285, 0.60428416913256308661, 0.55501350581971507825,
	0.44067310875325001635, 0.89306440327839194565, 0.88402875642489228810, 0.80429323564244499067, 0.90733142623116355231,
	0.73315357203322405390, 0.84540464698612634336, 0.68058862116707098896, 0.43821966349940733898, 0.40502274263626405298,
	0.15290734938304318970, 0.82521402433666001220, 0.38779691475920857658, 0.77990449879443665644, 0.02527351099947641223,
	0.09984262279588315714, 0.45457803263294310444, 0.55904040532994416001, 0.54806455596234981926, 0.96548579924204734173,
	0.80176351343723282169, 0.23301351850942005996, 0.67739833368043872000, 0.12721505045963472949, 0.24046287859243999760,
	0.08996380423124650150, 0.44326404183199928671, 0.91490165722052976071, 0.17471237819488884310, 0.17620738882465028405,
	0.78032495086192422333, 0.64382330815145153617, 0.54951998074701135613, 0.77317408243156662991, 0.55501155728708595659,
	0.98438098758408340334, 0.41278562556640630950, 0.05980278309419871716, 0.84373947697945416977, 0.36135232596942030265,
	0.52550695862416936500, 0.74144464391993780824, 0.17622575943719779273, 0.62151878137419670737, 0.14344572244317793388,
	0.89323830714117579672, 0.15848408691172714047, 0.89957349317934360030, 0.61282537891784767452, 0.00791548840914234653,
	0.27536191756903529034, 0.54601334043664910344, 0.16735269324653924714, 0.93929031411300594924, 0.55411208260422254551,
	0.19119408050126426406, 0.17238719987543983187, 0.49115307135985445550, 0.97036172344963617268, 0.44657403652019392626,
	0.94504343466721910477, 0.21253829250813702815, 0.95487557015066704276, 0.83991852485240884053, 0.95970301856740721101,
	0.20427723674825537059, 0.55599643251744218394, 0.09143974138725982577, 0.37817638405285911606, 0.49082719790929335275,
	0.85665864528391105160, 0.38950488828204615623, 0.11663040131632418828, 0.01158918976205994233, 0.00482461365402595233,
	0.30252072504549272553, 0.56647579658586511573, 0.75730649500591201683, 0.07913295857163330486, 0.33594542206186764110,
	0.68067267422426261618, 0.32597985912036025322, 0.40507300453918890964, 0.55885240511195357646, 0.58571560309208121645,
	0.98436543650967571530, 0.75483763489882898598, 0.37913351920819657752, 0.79962326158581466111, 0.21655438470088394277,
	0.79186032090740567599, 0.96121700759951810445, 0.80168928609338947807, 0.51362990604389509696, 0.50787177925466539958,
	0.70711451337258129062, 0.76320345910030813322, 0.89851261226890756780, 0.00221388400756633924, 0.18556718214045634346,
	0.22287681941963530317, 0.31092405349674337260, 0.66981059021635306630, 0.77796855864595977342, 0.56166723049147979519,
	0.74222381064272075605, 0.47875015990604946987, 0.48675209792278254276, 0.99051371396076654686, 0.79285526169838093033,
	0.17187967174527308500, 0.18877230481101373756, 0.94292078477052720154, 0.62518110569205592936, 0.70422453666691919741,
	0.40839550533786644301, 0.27016745403884681333, 0.48776899214731205604, 0.81715286414019510270, 0.37111479226133524578,
	0.30871929107737769519, 0.32055647718817976191, 0.90974628984940604882, 0.53628370069921751649, 0.54542523291673448948,
	0.22135442224781585769, 0.37816550680213218665, 0.69372026296927148430, 0.61473359555894715066, 0.07992834763243167886,
	0.71184337769789402007, 0.59089043157787256315, 0.50296680556122230353, 0.94877594320180726866, 0.71227335948975971225,
	0.98367711770760860620, 0.56112392388620794010, 0.92093419387852970637, 0.64069212988830773051, 0.31498041432309901962
};

float sr_randf(int i)
{
	return g_random_seq[i % g_random_seq.length()];
}

int sr_randi(int i, int max)
{
	return int(g_random_seq[i % g_random_seq.length()] * max);
}

%else

float sr_randf(int i) 
{
	return randf();
}

int sr_randi(int i, int max)
{
	return randi(max);
}

%endif